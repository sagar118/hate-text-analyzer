name: Dev-Environment-CI

on:
  workflow_dispatch:
  push:
    branches:
      - feature

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.16

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pipenv && pipenv install --dev

      - name: Run unit tests
        run: pipenv run pytest tests/unit_tests/

  build-infrastructure:
    name: Build Infrastructure
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      ecr_repo: ${{ steps.tf-apply.outputs.ecr_repo }}
      model_registry_bucket: ${{ steps.tf-apply.outputs.model_registry_bucket }}
      lambda_function: ${{ steps.tf-apply.outputs.lambda_function }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.3
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Initialize Terraform Configuration
        working-directory: "terraform"
        env:
          TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
        run: terraform init -input=false

      - name: Terraform plan
        id: tf-plan
        working-directory: "terraform"
        env:
          TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD}}
        run: terraform plan -var-file="./modules/vars/${TF_WORKSPACE}.tfvars" -input=false

      - name: Terraform apply
        id: tf-apply
        working-directory: "terraform"
        if: ${{ steps.tf-plan.outcome }} == 'success'
        env:
          TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD}}
        run: |
          terraform apply -var-file="./modules/vars/${TF_WORKSPACE}.tfvars" -input=false -auto-approve
          echo "ecr_repo=$(terraform output ecr_repo | xargs)" >> $GITHUB_OUTPUT
          echo "model_registry_bucket=$(terraform output model_registry_model_bucket | xargs)" >> $GITHUB_OUTPUT
          echo "lambda_function=$(terraform output lambda_function | xargs)" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: dev
    needs: build-infrastructure
    outputs:
      image_uri: ${{ steps.build-image-step.outputs.image_uri }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-step
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.build-infrastructure.outputs.ecr_repo }}
          IMAGE_TAG: "latest"   # ${{ github.sha }}
          BUCKET_NAME: ${{ needs.build-infrastructure.outputs.model_registry_bucket }}
        run: |
          docker build --build-arg EXPERIMENT_ID=${{ secrets.EXPERIMENT_ID }} --build-arg RUN_ID=${{ secrets.RUN_ID }} --build-arg MODEL_BUCKET=${BUCKET_NAME} -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} deployment/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update Lambda
        env:
          LAMBDA_FUNCTION: ${{ needs.build-infrastructure.outputs.lambda_function }}
        run: |
          STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "us-east-1" --query 'Configuration.LastUpdateStatus' --output text)
              while [[ "$STATE" == "InProgress" ]]
              do
                  echo "sleep 5sec ...."
                  sleep 5s
                  STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "us-east-1" --query 'Configuration.LastUpdateStatus' --output text)
                  echo $STATE
              done

          aws lambda update-function-configuration --function-name $LAMBDA_FUNCTION --image-uri ${{ steps.build-image-step.outputs.image_uri }}
